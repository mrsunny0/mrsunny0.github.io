Set of software development practices


Some of this article's listed sources may not be reliable. Please help this article by looking for better, more reliable sources. Unreliable citations may be challenged or deleted. (December 2018) (Learn how and when to remove this template message)
Software development
Core activities
Processes
Requirements
Design
Engineering
Construction
Testing
Debugging
Deployment
Maintenance

Paradigms and models
Agile
Cleanroom
Incremental
Prototyping
Spiral
V model
Waterfall

Methodologies and frameworks
ASD
DevOps
DAD
DSDM
FDD
IID
Kanban
Lean SD
LeSS
MDD
MSF
PSP
RAD
RUP
SAFe
Scrum
SEMAT
TSP
OpenUP
UP
XP

Supporting disciplines
Configuration management
Documentation
Software quality assurance (SQA)
Project management
User experience

Practices
ATDD
BDD
CCO
CI
CD
DDD
PP
SBE
Stand-up
TDD

Tools
Compiler
Debugger
Profiler
GUI designer
Modeling
IDE
Build automation
Release automation
Infrastructure as code
Testing

Standards and Bodies of Knowledge
BABOK
CMMI
IEEE standards
ISO 9001
ISO/IEC standards
PMBOK
SWEBOK
ITIL

Glossaries
Artificial intelligence
Computer science
Electrical and electronics engineering

Outlines
Outline of software development
vte
DevOps is a set of practices that combines software development (Dev) and information-technology operations (Ops) which aims to shorten the systems development life cycle and provide continuous delivery with high software quality.

Contents

1 Definition
2 History
3 Toolchains
4 Relationship to other approaches

4.1 Agile
4.2 ArchOps
4.3 TestOps
4.4 Continuous delivery
4.5 DataOps
4.6 Site-reliability engineering
4.7 Systems administration
4.8 WinOps
4.9 Toyota production system, lean thinking, kaizen
4.10 DevSecOps, Shifting Security Left


5 Goals
6 Criticism
7 Cultural change

7.1 DevOps as a job title
7.2 Building a DevOps culture


8 Deployment

8.1 Architecturally significant requirements
8.2 Microservices
8.3 DevOps automation


9 Adoption
10 See also
11 Notes
12 References
13 Further reading


Definition
Academics and practitioners have not developed a unique definition for the term "DevOps."
From an academic perspective, Len Bass, Ingo Weber, and Liming Zhu — three computer science researchers from the CSIRO and the Software Engineering Institute — suggested defining DevOps as "a set of practices intended to reduce the time between committing a change to a system and the change being placed into normal production, while ensuring high quality".
The term DevOps, however, has been used in multiple contexts.

History
This section may lend undue weight to certain ideas, incidents, or controversies. Please help improve it by rewriting it in a balanced fashion that contextualizes different points of view. (December 2018) (Learn how and when to remove this template message)
In 2009, the first conference named devopsdays was held in Ghent, Belgium. The conference was founded by Belgian consultant, project manager and agile practitioner Patrick Debois. The conference has now spread to other countries.
In 2012, the State of DevOps report was conceived and launched by Alanna Brown at Puppet. 
As of 2014, the annual State of DevOps report was published by Nicole Forsgren, Gene Kim, Jez Humble and others.
In 2014, they found that DevOps adoption was accelerating.
Also in 2014, Lisa Crispin and Janet Gregory wrote the book More Agile Testing, containing a chapter on testing and DevOps.

Toolchains
Some of this section's listed sources may not be reliable. Please help this article by looking for better, more reliable sources. Unreliable citations may be challenged or deleted. (December 2018) (Learn how and when to remove this template message)
Main article: DevOps toolchain
As DevOps is intended to be a cross-functional mode of working, those who practice the methodology use different sets of tools—referred to as "toolchains"—rather than a single one. These toolchains are expected to fit into one or more of the following categories, reflective of key aspects of the development and delivery process:

Coding – code development and review, source code management tools, code merging
Building – continuous integration tools, build status
Testing – continuous testing tools that provide quick and timely feedback on business risks
Packaging – artifact repository, application pre-deployment staging
Releasing – change management, release approvals, release automation
Configuring – infrastructure configuration and management, infrastructure as code tools
Monitoring – applications performance monitoring, end-user experience
Some categories are more essential in a DevOps toolchain than others; especially continuous integration (e.g. Jenkins, Gitlab, Bitbucket pipelines) and infrastructure as code (e.g., Terraform, Ansible, Puppet).
Forsgren et al. found that IT performance is strongly correlated with DevOps practices like source code management and continuous delivery.

Relationship to other approaches
Agile
Main article: Agile software development
Agile and DevOps serve complementary roles: several standard DevOps practices such as automated build and test, continuous integration, and continuous delivery originated in the Agile world, which dates (informally) to the 1990s, and formally to 2001. Agile can be viewed as addressing communication gaps between customers and developers, while DevOps addresses gaps between developers and IT operations / infrastructure. Also, DevOps has focus on the deployment of developed software, whether it is developed via Agile or other methodologies..

ArchOps
ArchOps presents an extension for DevOps practice, starting from software architecture artifacts, instead of source code, for operation deployment.. ArchOps states that architectural models are first-class entities in software development, deployment, and operations.

TestOps
TestOps is to hardware development what DevOps is to software development. The idea is a toolchain that links design and test operations together. In the case of hardware, design means EDA tools and the CAD department, and test means electronic measurement equipment like oscilloscopes and so on.

Continuous delivery
Main article: Continuous delivery
Continuous delivery and DevOps have common goals and are often used in conjunction, but there are subtle differences.
While continuous delivery is focused on automating the processes in software delivery, DevOps also focuses on the organizational change to support great collaboration between the many functions involved.
DevOps and continuous delivery share a common background in agile methods and lean thinking: small and frequent changes with focused value to the end customer.
Lean management and continuous delivery are fundamental to delivering value faster, in a sustainable way.
Continuous delivery focuses on making sure the software is always in a releasable state throughout its lifecycle. This makes it cheaper and less risky to deliver the software.
Improved collaboration and communication both between and within organizational teams can help achieve faster time to market, with reduced risks.

DataOps
Some of this section's listed sources may not be reliable. Please help this article by looking for better, more reliable sources. Unreliable citations may be challenged or deleted. (March 2019) (Learn how and when to remove this template message)
Main article: DataOps
The application of continuous delivery and DevOps to data analytics has been termed DataOps. DataOps seeks to integrate data engineering, data integration, data quality, data security, and data privacy with operations. It applies principles from DevOps, Agile Development and the statistical process control, used in lean manufacturing, to improve the cycle time of extracting value from data analytics.

Site-reliability engineering
Some of this section's listed sources may not be reliable. Please help this article by looking for better, more reliable sources. Unreliable citations may be challenged or deleted. (March 2019) (Learn how and when to remove this template message)
Main article: Site reliability engineering
In 2003, Google developed site reliability engineering (SRE), an approach for releasing new features continuously into large-scale high-availability systems while maintaining high-quality end-user experience. While SRE predates the development of DevOps, they are generally viewed as being related to each other.

Systems administration
This section needs expansion. You can help by adding to it. (June 2018)
DevOps is often viewed as an approach to applying systems administration work to cloud technology.

WinOps
Main article: WinOps
WinOps is the term used for DevOps practices for a Microsoft-centric view.

Toyota production system, lean thinking, kaizen
Main article: Toyota Production System
Toyota production system, TPS, implemented continuous improvement, kaizen, and lean thinking early. The Andon cord principle to create fast feedback, swarm and solve problems stems from TPS. 

DevSecOps, Shifting Security Left
DevSecOps is an augmentation of DevOps to allow for security practices to be integrated into the DevOps approach. The traditional centralised security team model must adopt a federated model allowing each delivery team the ability to factor in the correct security controls into their DevOps practices.

Goals
Some of this section's listed sources may not be reliable. Please help this article by looking for better, more reliable sources. Unreliable citations may be challenged or deleted. (March 2019) (Learn how and when to remove this template message)
IT performance can be measured in terms of throughput and stability. 
Throughput can be measured by deployment frequency and lead time for changes; stability can be measured by mean time to recover. The State of DevOps Reports found that investing in practices that increase these throughput and stability measures increase IT performance.
The goals of DevOps span the entire delivery pipeline. They include:

Improved deployment frequency;
Faster time to market;
Lower failure rate of new releases;
Shortened lead time between fixes;
Faster mean time to recovery (in the event of a new release crashing or otherwise disabling the current system).
Simple processes become increasingly programmable and dynamic, using a DevOps approach. DevOps aims to maximize the predictability, efficiency, security, and maintainability of operational processes. Very often, automation supports this objective.
DevOps integration targets product delivery, continuous testing, quality testing, feature development, and maintenance releases in order to improve reliability and security and provide faster development and deployment cycles. Many of the ideas (and people) involved in DevOps came from the enterprise systems management and agile software development movements.
Practices that correlate with deployment frequency are:

Continuous delivery
Using version control for all production artifacts
Practices that correlate with a lead time for change are:

Using version control for all production artifacts
Automated testing
Practices that correlate with a mean time to recovery for change are:

Using version control for all production artifacts
Monitoring system and application health
Companies that practice DevOps have reported significant benefits, including: significantly shorter time to market, improved customer satisfaction, better product quality, more reliable releases, improved productivity and efficiency, and the increased ability to build the right product by fast experimentation.
The 2014 State of DevOps Report found that "IT performance strongly correlates with well-known DevOps practices such as the use of version
control and continuous delivery."

Criticism
There is a lack of evidence in academic literature on the effectiveness of DevOps.

Cultural change
DevOps initiatives can create cultural changes in companies  by transforming the way operations, developers, and testers collaborate during the development and delivery processes. Getting these groups to work cohesively is a critical challenge in enterprise DevOps adoption. DevOps is as much about culture, as it is about the toolchain.

DevOps as a job title
While DevOps describes an approach to work rather than a distinct role (like system administrator), job advertisements are increasingly using terms like "DevOps Engineer".
While DevOps reflects complex topics, the DevOps community uses analogies to communicate important concepts, much like "The Cathedral and the Bazaar" from the open-source community.

Cattle not Pets: the paradigm of disposable server infrastructure.
10 deployments per day: the story of Flickr adopting DevOps.
Building a DevOps culture
Organizational culture is a strong predictor of IT and organizational performance. Cultural practices such as information flow, collaboration, shared responsibilities, learning from failures and new ideas are central to DevOps. Team-building and other employee engagement activities are often used to create an environment that fosters this communication and cultural change within an organization. Team-building activities can include board games, trust activities, and employee engagement seminars.
The 2015 State of DevOps Report discovered that the top seven measures with the strongest correlation to organizational culture are:
1. Organizational investment in DevOps:
2. Team leaders' experience and effectiveness.
3. Continuous delivery.
4. The ability of different disciplines (development, operations, and infosec) to achieve
win-win outcomes.
5. Organizational performance.
6. Deployment pain.
7. Lean management practices.

Deployment
Some of this section's listed sources may not be reliable. Please help this article by looking for better, more reliable sources. Unreliable citations may be challenged or deleted. (March 2019) (Learn how and when to remove this template message)
Companies with very frequent releases may require knowledge on DevOps. For example, the company that operates image hosting website Flickr developed a DevOps approach to support ten deployments a day. Daily deployment cycle would be much higher at organizations producing multi-focus or multi-function applications. Daily deployment is referred to as continuous deployment or continuous delivery  and has been associated with the lean startup methodology. Professional associations and blogs posts have formed on the topic since 2009.

Architecturally significant requirements
To practice DevOps effectively, software applications have to meet a set of architecturally significant requirements (ASRs), such as: deployability, modifiability, testability, and monitorability. These ASRs require a high priority and cannot be traded off lightly.

Microservices
Although in principle it is possible to practice DevOps with any architectural style, the microservices architectural style is becoming the standard for building continuously deployed systems. Small size service allows the architecture of an individual service to emerge through continuous refactoring, hence reducing the need for a big upfront design, allows for releasing the software early and continuously.

DevOps automation
DevOps automation can be achieved by repackaging platforms, systems, and applications into reusable building blocks through the use of technologies such as virtual machines and containerization.
Implementation of DevOps automation in the IT-organization is heavily dependent on tools, which are required to cover different areas of the systems development lifecycle (SDLC):

Infrastructure as code
CI/CD
Test automation
Containerization
Orchestration
Software deployment
Software measurement
Adoption
Some of this section's listed sources may not be reliable. Please help this article by looking for better, more reliable sources. Unreliable citations may be challenged or deleted. (March 2019) (Learn how and when to remove this template message)
Some articles in the DevOps literature assume or recommend significant participation in DevOps initiatives from outside an organization's IT department, e.g.: "DevOps is just the agile principle, taken to the full enterprise."
In a survey published in January 2016 by the SaaS cloud-computing company RightScale, DevOps adoption increased from 66 percent in 2015 to 74 percent in 2016. And among larger enterprise organizations, DevOps adoption is even higher – 81 percent.
Adoption of DevOps is being driven by many factors – including:

Use of agile and other development processes and methods;
Demand for an increased rate of production releases – from application and business unit stakeholders;
Wide availability of virtualized and cloud infrastructure – from internal and external providers;
Increased usage of data center automation and configuration management tools;
Increased focus on test automation and continuous integration methods;
A critical mass of publicly available best practices.
See also
Twelve-factor app
Infrastructure as Code
Notes


^ Dyck et. al (2015) "To our knowledge, there is no uniform definition for the terms release engineering and DevOps. As a consequence, many people use their own definitions or rely on others, which results in confusion about those terms."

^ Jabbari et. al (2016) "The research results of this study showed the need for a definition as individual studies do not consistently define DevOps."

^ Erich et. al (2017) "We noticed that there are various gaps in the study of DevOps: There is no consensus of what concepts DevOps covers, nor how DevOps is defined."

^ Erich et. al (2017) "We discovered that there exists little agreement about the characteristics of DevOps in the academic literature."

^ Erich et. al (2017) "We noticed that there are various gaps in the study of DevOps:  There is a lack of evidence on the effectiveness of DevOps.


References


^ Mala, D.J. (2019). Integrating the Internet of Things Into Software Engineering Practices. Advances in Systems Analysis, Software Engineering, and High Performance Computing. IGI Global. p. 16. ISBN 978-1-5225-7791-1. Retrieved 4 April 2019.

^ a b Loukides, Mike (7 June 2012). "What is DevOps?". O'Reilly_Media.

^ Dyck, Andrej; Penners, Ralf; Lichter, Horst (19 May 2015). "Towards Definitions for Release Engineering and DevOps". Proceedings of the 2015 IEEE/ACM 3rd International Workshop on Release Engineering. IEEE.

^ Jabbari, Ramtin; bin Ali, Nauman; Petersen, Kai; Tanveer, Binish (May 2016). "What is DevOps?: A Systematic Mapping Study on Definitions and Practices". Proceedings of the 2016 Scientific Workshop. Association for Computing Machinery.

^ a b c Erich, F.M.A.; Amrit, C.; Daneva, M. (June 2017). "A Qualitative Study of DevOps Usage in Practice". Journal of Software: Evolution and Process. 29 (6).

^ Bass, Len; Weber, Ingo; Zhu, Liming (2015). DevOps: A Software Architect's Perspective. ISBN 978-0134049847.

^ "Surprise! Broad Agreement on the Definition of DevOps". DevOps.com. 13 May 2015.

^ Mezak, Steve (25 January 2018). "The Origins of DevOps: What's in a Name?". devops.com. Retrieved 6 May 2019.

^ Debois, Patrick. "Agile 2008 Toronto". Just Enough Documented Information. Retrieved 12 March 2015.

^ Debois, Patrick. "DevOps Days". DevOps Days. Retrieved 31 March 2011.

^ Alana Brown; Nicole Forsgren; Jez Humble; Nigel Kersten; Gene Kim (2016). "2016 State of DevOps Report" (PDF). Puppet Labs, DORA (DevOps Research. Retrieved 6 May 2019.

^ "Puppet - Alanna Brown". Puppet Labs. Retrieved 27 April 2019.

^ a b c d e f g h i j k l m Nicole Forsgren; Gene Kim; Nigel Kersten; Jez Humble (2014). "2014 State of DevOps Report" (PDF). Puppet Labs, IT Revolution Press and ThoughtWorks. Retrieved 27 April 2019.

^ a b c d "2015 State of DevOps Report" (PDF). Puppet Labs, Pwc, IT Revolution Press. 2015. Retrieved 6 May 2019.

^ "More Agile Testing" (PDF). October 2014. Retrieved 6 May 2019.

^ Crispin, Lisa; Gregory, Janet (October 2014). More Agile Testing. ISBN 9780133749571. Retrieved 6 May 2019.

^ Gartner Market Trends: DevOps – Not a Market, but Tool-Centric Philosophy That supports a Continuous Delivery Value Chain (Report). Gartner. 18 February 2015.

^ Edwards, Damon. "Integrating DevOps tools into a Service Delivery Platform". dev2ops.org.

^ Seroter, Richard. "Exploring the ENTIRE DevOps Toolchain for (Cloud) Teams". infoq.com.

^ Theakanath, Thomas (5 February 2016). "DevOps Stack on a Shoestring Budget". devops.com.

^ "Stronger DevOps Culture with Puppet and Vagrant". Puppet Labs. Retrieved 22 October 2015.

^ a b Watts, Stephen; Kidd, Chrissy (10 August 2017). "DevOps vs Agile: What's the Difference and How Are They Related?". bmc.com. Retrieved 1 March 2019.

^ "Agile Vs. DevOps: What's the difference?". guru99.com. Retrieved 1 March 2019.

^ Castellanos, Camilo; Correal, Dario (15 September 2018). Executing Architectural Models for Big Data Analytics. Lecture Notes in Computer Science. 11048. pp. 364–371. doi:10.1007/978-3-030-00761-4_24. ISBN 978-3-030-00760-7.

^ Keysight (19 March 2019). "The TestOps Manifesto: A Blueprint for Connected, Agile Design and Test" (PDF). Retrieved 11 September 2019. Companies that embrace DevOps workflows report 29% greater productivity from their engineers. TestOps – DevOps for design and test – promises similar benefits.

^ a b Humble, Jez; Farley, David (2011). Continuous Delivery: reliable software releases through build, test, and deployment automation. Pearson Education Inc. ISBN 978-0-321-60191-9.

^ Hammond, Jeffrey (9 September 2011). "The Relationship between DevOps and Continuous Delivery". Forrester Research.

^ Ambler, Scott W. (12 February 2014). "We need more Agile IT Now!". Dr. Dobb's the World of Software Development.

^ a b Chen, Lianping (2015). "Continuous Delivery: Huge Benefits, but Challenges Too". IEEE Software. 32 (2): 50–54. doi:10.1109/MS.2015.27.

^ a b Chen, Lianping (2018). Microservices: Architecting for Continuous Delivery and DevOps. The IEEE International Conference on Software Architecture (ICSA 2018). IEEE.

^ "From DevOps to DataOps, By Andy Palmer - Tamr Inc". Tamr Inc. 7 May 2015. Retrieved 23 August 2017.

^ DataKitchen (15 March 2017). "How to Become a Rising Star with Data Analytics". data-ops. Retrieved 23 August 2017.

^ Beyer, Betsy; Jones, Chris; Petoff, Jennifer; Murphy, Niall Richard (April 2016). Site Reliability Engineering. O'Reilly Media. ISBN 978-1-4919-2909-4.

^ "SRE vs. DevOps — a False Distinction? - DevOps.com". 18 May 2017.

^ "How to stay relevant in the DevOps era: A SysAdmin's survival guide".

^ Analyzing the DNA of DevOps, Brent Aaron Reed, Willy Schaub, 2018-11-14.

^ The DevOps Handbook: How to Create World-Class Agility, Reliability, and Security in Technology Organizations, Gene Kim, Patrick Debois, John Willis, Jezz Humble, 2016

^ "What is DevOps?". NewRelic.com. Retrieved 21 October 2014.

^ Nasrat, Paul. "Agile Infrastructure". InfoQ. Retrieved 31 March 2011.

^ Emerging Technology Analysis: DevOps a Culture Shift, Not a Technology (Report). Gartner.

^ "Gartner IT Glossary – devops". Gartner. Retrieved 30 October 2015.

^ Jones, Stephen; Noppen, Joost; Lettice, Fiona (21 July 2016). Proceedings of the 2nd International Workshop on Quality-Aware Dev Ops - QUDOS 2016. pp. 7–11. doi:10.1145/2945408.2945410. ISBN 9781450344111.

^ Mandi Walls (25 September 2015). "Building a DevOps culture". O'Reilly.

^ "Is DevOps a Title? - DevOps.com". DevOps.com. 20 March 2014. Retrieved 22 July 2017.

^ "DevOps: A Job Title or a School of Thought?". Monster Career Advice. Retrieved 22 July 2017.

^ "What are known useful and misleading memes in the DevOps culture?". devops.stackexchange.com. Retrieved 29 June 2017.

^ Sharwood, Simon. "Are Your Servers Pets or Cattle?". The Register. Retrieved 2 July 2018.

^ Walls, Mandi (15 April 2013). Building a DevOps Culture. OReilly Media. ISBN 9781449368364.

^ Roach, Patrick (8 October 2015). "Dice Breakers: Using DevOps principles and nerdery to reimagine Team building". DevOps.com.

^ "10+ Deploys Per Day: Dev and Ops Cooperation at Flickr". 23 June 2009.

^ "SAM SIG: Applied Lean Startup Ideas: Continuous Deployment at kaChing". SVForum. Archived from the original on 20 October 2012. Retrieved 20 June 2011.

^ Humble, Jez. "Why Enterprises Must Adopt Devops to Enable Continuous Delivery". Cutter IT Journal.

^ "Applied Lean Startup Ideas: Continuous Deployment at kaChing". 26 May 2010.

^ "DevOps Days 2009 Conference".

^ Edwards, Damon. "DevOps Meetup Recap".

^ Chen, Lianping (2015). Towards Architecting for Continuous Delivery. The 12th Working IEEE/IFIP Conference on Software Architecture(WICSA 2015). Montréal, Canada: IEEE. doi:10.1109/WICSA.2015.23.

^ Chen, Lianping; Ali Babar, Muhammad (2014). Towards an Evidence-Based Understanding of Emergence of Architecture through Continuous Refactoring in Agile Software Development. The 11th Working IEEE/IFIP Conference on Software Architecture(WICSA 2014). IEEE. doi:10.1109/WICSA.2014.45.

^ "Unleashing the Full Potential of Containerization for DevOps". 20 September 2017. Retrieved 20 June 2018.

^ "Containers vs. virtual machines: A simplified answer to a complex question".

^ "DevOps best practices: How much automation do you need?". TechBeacon. Retrieved 14 November 2018.

^ "DevOps is Agile for the Rest of the Company". DevOps.com. 4 March 2015.

^ Harvey, Cynthia (9 January 2017). "10 Ways DevOps is Changing the Enterprise". Datamation.

^ "Virtual Infrastructure products: features comparison". Welcome to IT 2.0: Next Generation IT infrastructures.

^ Ellard, Jennifer. "Bringing Order to Chaos through Data Center Automation". Information Management. SourceMedia. Archived from the original on 11 June 2010.

^ "Impact of DevOps on Testing". DevOps.com. 21 August 2015.


Further reading
Davis, Jennifer; Daniels, Ryn (30 May 2016). Effective DevOps : building a culture of collaboration, affinity, and tooling at scale. Sebastopol, CA: O'Reilly. ISBN 9781491926437. OCLC 951434424.
Kim, Gene; Debois, Patrick; Willis, John; Humble, Jez; Allspaw, John (7 October 2015). The DevOps handbook : how to create world-class agility, reliability, and security in technology organizations (First ed.). Portland, OR. ISBN 9781942788003. OCLC 907166314.
Forsgren, Nicole; Humble, Jez; Kim, Gene (27 March 2018). Accelerate: The Science of Lean Software and DevOps: Building and Scaling High Performing Technology Organizations (First ed.). IT Revolution Press. ISBN 9781942788331.



